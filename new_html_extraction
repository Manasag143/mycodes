from bs4 import BeautifulSoup
import re
import os
import json

def extract_strengths_weaknesses(html_file_path):
    """Extract strengths and weaknesses from a single HTML file."""
    with open(html_file_path, 'r', encoding='utf-8') as file:
        soup = BeautifulSoup(file.read(), 'html.parser')
    
    return extract_from_soup(soup)

def extract_from_html_content(html_content):
    """Extract strengths and weaknesses from HTML content string."""
    soup = BeautifulSoup(html_content, 'html.parser')
    return extract_from_soup(soup)

def is_bold_element(element):
    """Check if element has bold styling using various methods."""
    # Method 1: Check style attribute for font-weight
    style = element.get('style', '')
    if 'font-weight' in style and ('bold' in style or '700' in style or 'bolder' in style):
        return True
    
    # Method 2: Check for bold tags (strong, b)
    if element.name in ['strong', 'b']:
        return True
    
    # Method 3: Check class attribute
    classes = element.get('class', [])
    for cls in classes:
        if 'bold' in cls.lower():
            return True
    
    # Method 4: Check parent elements for bold styling
    parent = element.parent
    if parent:
        parent_style = parent.get('style', '')
        if 'font-weight' in parent_style and ('bold' in parent_style or '700' in parent_style):
            return True
    
    return False

def extract_from_soup(soup):
    """Extract strengths and weaknesses from BeautifulSoup object."""
    # Find the "Key Rating Drivers" section
    target_section = None
    for element in soup.find_all(['p', 'span']):
        if 'Key Rating Drivers' in element.get_text():
            target_section = element.find_parent()
            break
    
    if not target_section:
        return {}, {}
    
    strengths_dict = {}
    weaknesses_dict = {}
    current_section = None
    
    # Get all elements in the target section (paragraphs, lists, list items)
    all_elements = target_section.find_all(['p', 'ul', 'li'])
    
    for element in all_elements:
        text = element.get_text().strip()
        
        # Skip empty elements
        if not text:
            continue
        
        # Check if this is a section header (Strengths/Weaknesses)
        if element.name == 'p':
            if re.search(r'\bStrengths?\s*:', text, re.IGNORECASE):
                current_section = 'strengths'
                continue
            elif re.search(r'\bWeakness(es)?\s*:', text, re.IGNORECASE):
                current_section = 'weaknesses'
                continue
        
        # Process list items within a section
        if element.name == 'li' and current_section:
            # Look for bold elements within this list item
            bold_elements = []
            
            # Find all spans with bold styling
            spans = element.find_all('span')
            for span in spans:
                if is_bold_element(span):
                    bold_elements.append(span)
            
            # Also check for strong/b tags
            bold_tags = element.find_all(['strong', 'b'])
            bold_elements.extend(bold_tags)
            
            if bold_elements:
                # Get the first bold element as the key
                key_element = bold_elements[0]
                key = key_element.get_text().strip().rstrip(':')
                
                # Get the full text and remove the key part to get the value
                full_text = element.get_text().strip()
                key_text = key_element.get_text().strip()
                
                # Remove the key from the full text to get the value
                if key_text in full_text:
                    value = full_text.replace(key_text, '', 1).strip()
                    # Remove leading colon if present
                    value = value.lstrip(':').strip()
                else:
                    value = full_text
                
                # Store in appropriate dictionary
                if current_section == 'strengths':
                    strengths_dict[key] = value
                elif current_section == 'weaknesses':
                    weaknesses_dict[key] = value
        
        # Also handle paragraphs with bold content (alternative structure)
        elif element.name == 'p' and current_section:
            # Check if this paragraph contains bold elements
            bold_elements = []
            
            # Find bold spans
            spans = element.find_all('span')
            for span in spans:
                if is_bold_element(span):
                    bold_elements.append(span)
            
            # Find bold tags
            bold_tags = element.find_all(['strong', 'b'])
            bold_elements.extend(bold_tags)
            
            if bold_elements:
                # Get the first bold element as the key
                key_element = bold_elements[0]
                key = key_element.get_text().strip().rstrip(':')
                
                # Get the full text and remove the key part to get the value
                full_text = element.get_text().strip()
                key_text = key_element.get_text().strip()
                
                # Remove the key from the full text to get the value
                if key_text in full_text:
                    value = full_text.replace(key_text, '', 1).strip()
                    # Remove leading colon if present
                    value = value.lstrip(':').strip()
                else:
                    value = full_text
                
                # Store in appropriate dictionary
                if current_section == 'strengths':
                    strengths_dict[key] = value
                elif current_section == 'weaknesses':
                    weaknesses_dict[key] = value
    
    return strengths_dict, weaknesses_dict

def debug_html_structure(html_file_path):
    """Debug function to understand HTML structure."""
    with open(html_file_path, 'r', encoding='utf-8') as file:
        soup = BeautifulSoup(file.read(), 'html.parser')
    
    # Find the target section
    target_section = None
    for element in soup.find_all(['p', 'span']):
        if 'Key Rating Drivers' in element.get_text():
            target_section = element.find_parent()
            break
    
    if target_section:
        print("Found target section!")
        
        # Look for Strengths section
        strengths_found = False
        for element in target_section.find_all(['p']):
            text = element.get_text().strip()
            if 'Strengths:' in text:
                print(f"\nFound Strengths section: {text}")
                strengths_found = True
                break
        
        if strengths_found:
            # Find all list items after strengths
            all_elements = target_section.find_all(['p', 'ul', 'li'])
            in_strengths = False
            
            for element in all_elements:
                text = element.get_text().strip()
                
                if 'Strengths:' in text:
                    in_strengths = True
                    continue
                elif 'Weakness' in text:
                    in_strengths = False
                    continue
                
                if in_strengths and element.name == 'li':
                    print(f"\nList item found:")
                    print(f"  Text: {text[:100]}...")
                    
                    # Check for bold elements
                    spans = element.find_all('span')
                    bold_spans = []
                    for span in spans:
                        style = span.get('style', '')
                        if 'font-weight' in style and 'bold' in style:
                            bold_spans.append(span.get_text().strip())
                    
                    strong_tags = [tag.get_text().strip() for tag in element.find_all(['strong', 'b'])]
                    
                    print(f"  Bold spans: {bold_spans}")
                    print(f"  Strong tags: {strong_tags}")
                    print(f"  HTML: {str(element)[:200]}...")
    else:
        print("Target section not found!")

def process_folder(folder_path):
    """Process all HTML files in a folder."""
    all_results = {}
    
    # Find all HTML files
    html_files = [f for f in os.listdir(folder_path) if f.lower().endswith(('.html', '.htm'))]
    
    print(f"Found {len(html_files)} HTML files")
    
    # Process each file
    for filename in html_files:
        file_path = os.path.join(folder_path, filename)
        try:
            print(f"Processing: {filename}")
            strengths, weaknesses = extract_strengths_weaknesses(file_path)
            
            file_key = filename.replace('.html', '').replace('.htm', '')
            all_results[file_key] = {
                'strengths': strengths,
                'weaknesses': weaknesses
            }
            
        except Exception as e:
            print(f"Error with {filename}: {e}")
    
    return all_results

def save_and_print_results(results):
    """Save to JSON and print summary."""
    # Save to JSON
    with open('extracted_results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    # Print summary
    print(f"\n{'='*80}")
    print("RESULTS SUMMARY")
    print(f"{'='*80}")
    
    for filename, data in results.items():
        print(f"\nüìÑ {filename}:")
        print(f"   ‚úÖ Strengths: {len(data['strengths'])}")
        print(f"   ‚ö†Ô∏è  Weaknesses: {len(data['weaknesses'])}")
        
        # Print actual content
        if data['strengths']:
            print("\n   STRENGTHS:")
            for i, (key, value) in enumerate(data['strengths'].items(), 1):
                print(f"   {i}. Key: {key}")
                print(f"      Value: {value[:200]}...")
                print()
        
        if data['weaknesses']:
            print("\n   WEAKNESSES:")
            for i, (key, value) in enumerate(data['weaknesses'].items(), 1):
                print(f"   {i}. Key: {key}")
                print(f"      Value: {value[:200]}...")
                print()
    
    print(f"\nüíæ Full results saved to 'extracted_results.json'")

if __name__ == "__main__":
    folder_path = 'html_files'

    html_files = [f for f in os.listdir(folder_path) if f.lower().endswith(('.html', '.htm'))]
    if html_files:
        print("üîç Debugging actual HTML structure...")
        debug_html_structure(os.path.join(folder_path, html_files[0]))
        print("\n" + "="*80 + "\n")
    
    print("üîç Processing all HTML files in folder...")
    results = process_folder(folder_path)
    
    if results:
        save_and_print_results(results)
    else:
        print("‚ùå No HTML files found or processed successfully!")
