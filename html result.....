import re
import json
import os
from bs4 import BeautifulSoup
from typing import Dict, List, Optional
import logging

class HybridRatingDriversExtractor:
    """
    Hybrid approach: Use targeted area extraction + bold detection logic
    Step 1: Extract targeted area (from second code)
    Step 2: Apply bold detection logic (from first code)
    """
    
    def __init__(self):
        self.setup_logging()
        
    def setup_logging(self):
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
        self.logger = logging.getLogger(__name__)
    
    def step1_read_html(self, file_path: str) -> str:
        """Read HTML file with encoding detection"""
        print("üîÑ STEP 1: Reading HTML file...")
        
        encodings = ['utf-8', 'latin-1', 'cp1252', 'iso-8859-1', 'windows-1252']
        
        for encoding in encodings:
            try:
                with open(file_path, 'r', encoding=encoding) as file:
                    html_content = file.read()
                
                print(f"‚úÖ Successfully read HTML file with {encoding} encoding")
                print(f"üìä File size: {len(html_content):,} characters")
                return html_content
                
            except (UnicodeDecodeError, UnicodeError):
                print(f"‚ùå Failed with {encoding}, trying next encoding...")
                continue
        
        raise Exception("‚ùå Could not decode file with any standard encoding")
    
    def step2_extract_target_area_html(self, html_content: str) -> Optional[BeautifulSoup]:
        """
        STEP 2: Extract the targeted HTML area containing Key Rating Drivers
        Returns BeautifulSoup element (not just text) for bold detection
        """
        print("\nüîÑ STEP 2: Extracting targeted HTML area...")
        
        # Parse HTML
        soup = BeautifulSoup(html_content, 'html.parser')
        
        target_section = None
        
        # Method 1: Find by "Key Rating Drivers" text
        for element in soup.find_all(['p', 'span', 'td', 'div']):
            if 'Key Rating Drivers' in element.get_text():
                # Try to find the appropriate parent container
                target_section = element.find_parent()
                
                # If the parent seems too small, try going up one more level
                if target_section and len(target_section.get_text()) < 500:
                    larger_parent = target_section.find_parent()
                    if larger_parent and 'Strengths' in larger_parent.get_text():
                        target_section = larger_parent
                
                break
        
        # Method 2: If not found, look for elements containing both "Strengths" and "Weakness"
        if not target_section:
            print("   üîÑ Trying alternative method...")
            for element in soup.find_all(['td', 'div']):
                text = element.get_text()
                if ('Strengths' in text and 'Weakness' in text and 
                    len(text) > 500):  # Must be substantial content
                    target_section = element
                    break
        
        if target_section:
            text_length = len(target_section.get_text())
            print(f"‚úÖ Found target HTML area: {text_length} characters")
            
            # Show preview of the target area
            preview_text = target_section.get_text()[:500]
            print(f"üìÑ Preview: {preview_text}...")
            
            print("\nüìÑ TARGET AREA HTML STRUCTURE:")
            print("=" * 80)
            
            # Show the HTML elements in target area
            all_elements = target_section.find_all(['p', 'ul', 'li', 'div'])
            print(f"üìä Target area contains {len(all_elements)} HTML elements")
            
            # Show first few elements
            for i, element in enumerate(all_elements[:10]):
                text = element.get_text().strip()
                if text and len(text) > 10:
                    print(f"   {i+1}. {element.name}: {text[:60]}...")
            
            print("=" * 80)
            
            return target_section
        else:
            print("‚ùå Could not find target area")
            return None
    
    def is_bold_element(self, element):
        """Check if element has bold styling using various methods."""
        # Method 1: Check style attribute for font-weight
        style = element.get('style', '')
        if 'font-weight' in style and ('bold' in style or '700' in style or 'bolder' in style):
            return True
        
        # Method 2: Check for bold tags (strong, b)
        if element.name in ['strong', 'b']:
            return True
        
        # Method 3: Check class attribute
        classes = element.get('class', [])
        for cls in classes:
            if 'bold' in cls.lower():
                return True
        
        # Method 4: Check parent elements for bold styling
        parent = element.parent
        if parent:
            parent_style = parent.get('style', '')
            if 'font-weight' in parent_style and ('bold' in parent_style or '700' in parent_style):
                return True
        
        return False
    
    def extract_key_value_from_element(self, element):
        """
        Extract key-value pair from a single element using bold detection
        """
        full_text = element.get_text().strip()
        
        # Skip if text is too short or contains unwanted headers
        if (len(full_text) < 20 or 
            'Key Rating Drivers' in full_text or
            re.match(r'^\s*(Strengths?|Weakness(?:es)?)\s*:?\s*$', full_text, re.IGNORECASE)):
            return None, None
        
        # Method 1: Look for bold elements within this element
        bold_elements = []
        
        # Find all spans with bold styling
        spans = element.find_all('span')
        for span in spans:
            if self.is_bold_element(span):
                bold_text = span.get_text().strip()
                if bold_text and len(bold_text) > 3:  # Must be meaningful
                    bold_elements.append((span, bold_text))
        
        # Also check for strong/b tags
        bold_tags = element.find_all(['strong', 'b'])
        for tag in bold_tags:
            bold_text = tag.get_text().strip()
            if bold_text and len(bold_text) > 3:
                bold_elements.append((tag, bold_text))
        
        # Method 2: If we found bold elements, extract key and value properly
        if bold_elements:
            # Sort by length to get the most complete bold text as title
            bold_elements.sort(key=lambda x: len(x[1]), reverse=True)
            
            # Try each bold element as potential key
            for bold_element, bold_text in bold_elements:
                # Clean the bold text to use as key
                potential_key = bold_text.rstrip(':').strip()
                
                # Validate the key
                if (len(potential_key) > 5 and len(potential_key) < 300 and
                    not potential_key.lower().startswith(('the ', 'this ', 'it ', 'there ')) and
                    not re.match(r'^\s*(Strengths?|Weakness(?:es)?)', potential_key, re.IGNORECASE)):
                    
                    # Method 2a: Try to get description by removing bold text from full text
                    remaining_text = full_text
                    
                    # Remove the bold text from the full text
                    if bold_text in remaining_text:
                        remaining_text = remaining_text.replace(bold_text, '', 1)
                    
                    # Clean up the remaining text
                    description = remaining_text.strip().lstrip(':').strip()
                    
                    # Method 2b: If description is empty or too short, try HTML-based extraction
                    if not description or len(description) < 10:
                        # Create a copy of the element and remove the bold element
                        temp_element = BeautifulSoup(str(element), 'html.parser')
                        
                        # Find and remove the bold element in the copy
                        if bold_element.name == 'span':
                            temp_spans = temp_element.find_all('span')
                            for temp_span in temp_spans:
                                if (self.is_bold_element(temp_span) and 
                                    temp_span.get_text().strip() == bold_text):
                                    temp_span.decompose()
                                    break
                        else:
                            temp_bolds = temp_element.find_all(bold_element.name)
                            for temp_bold in temp_bolds:
                                if temp_bold.get_text().strip() == bold_text:
                                    temp_bold.decompose()
                                    break
                        
                        description = temp_element.get_text().strip().lstrip(':').strip()
                    
                    # Validate and return
                    if potential_key:
                        key = self.clean_text(potential_key)
                        value = self.clean_text(description) if description else ""
                        
                        if key and len(key) > 5:
                            return key, value
        
        # Method 3: If no bold elements, try colon-based extraction
        if ':' in full_text:
            # Look for the first colon that separates title from description
            colon_pos = full_text.find(':')
            potential_key = full_text[:colon_pos].strip()
            potential_value = full_text[colon_pos+1:].strip()
            
            # Validate the potential key
            if (len(potential_key) > 5 and len(potential_key) < 300 and
                not potential_key.lower().startswith(('the ', 'this ', 'it ', 'there ')) and
                not re.match(r'^\s*(Strengths?|Weakness(?:es)?)', potential_key, re.IGNORECASE)):
                
                return self.clean_text(potential_key), self.clean_text(potential_value)
        
        return None, None
    
    def step3_apply_bold_logic(self, target_section: BeautifulSoup) -> Dict[str, Dict[str, str]]:
        """
        STEP 3: Apply bold detection logic to the targeted HTML area
        """
        print("\nüîÑ STEP 3: Applying bold detection logic to target area...")
        
        strengths_dict = {}
        weaknesses_dict = {}
        current_section = None
        
        # Get all elements in the target section
        all_elements = target_section.find_all(['p', 'ul', 'li', 'div'])
        
        print(f"üîç Processing {len(all_elements)} elements in target area...")
        
        for i, element in enumerate(all_elements):
            text = element.get_text().strip()
            
            # Skip empty elements
            if not text:
                continue
            
            # Debug: Show what we're processing
            if len(text) > 20:
                print(f"   Element {i}: {element.name} - {text[:60]}...")
            
            # Skip elements that contain "Key Rating Drivers" header text
            if 'Key Rating Drivers' in text:
                print(f"   üö´ Skipping header element: {text[:60]}...")
                continue
            
            # Check if this is a section header (Strengths/Weaknesses)
            if element.name in ['p', 'div']:
                # Look for standalone section headers (not mixed with content)
                if re.search(r'^\s*Strengths?\s*:?\s*$', text, re.IGNORECASE):
                    current_section = 'strengths'
                    print(f"   üìç Found Strengths header at element {i}")
                    continue
                elif re.search(r'^\s*Weakness(?:es)?\s*:?\s*$', text, re.IGNORECASE):
                    current_section = 'weaknesses'
                    print(f"   üìç Found Weaknesses header at element {i}")
                    continue
                # Look for section headers that are followed by a colon and then content
                elif re.search(r'^\s*Strengths?\s*:\s*.+', text, re.IGNORECASE):
                    current_section = 'strengths'
                    print(f"   üìç Found Strengths section with content at element {i}")
                    # Don't continue - process this element as content too
                elif re.search(r'^\s*Weakness(?:es)?\s*:\s*.+', text, re.IGNORECASE):
                    current_section = 'weaknesses'
                    print(f"   üìç Found Weaknesses section with content at element {i}")
                    # Don't continue - process this element as content too
            
            # Process list items within a section
            if element.name == 'li' and current_section:
                key, value = self.extract_key_value_from_element(element)
                if key:
                    if current_section == 'strengths':
                        strengths_dict[key] = value
                        print(f"   ‚úÖ Strength: {key[:50]}...")
                    elif current_section == 'weaknesses':
                        weaknesses_dict[key] = value
                        print(f"   ‚úÖ Weakness: {key[:50]}...")
            
            # Also handle paragraphs and divs with bold content (alternative structure)
            elif element.name in ['p', 'div'] and current_section and len(text) > 30:
                key, value = self.extract_key_value_from_element(element)
                if key:
                    if current_section == 'strengths':
                        strengths_dict[key] = value
                        print(f"   ‚úÖ Strength: {key[:50]}...")
                    elif current_section == 'weaknesses':
                        weaknesses_dict[key] = value
                        print(f"   ‚úÖ Weakness: {key[:50]}...")
        
        print(f"\nüìä Bold detection results:")
        print(f"   üìà Strengths found: {len(strengths_dict)}")
        print(f"   üìâ Weaknesses found: {len(weaknesses_dict)}")
        
        return {"strengths": strengths_dict, "weaknesses": weaknesses_dict}
    
    def clean_text(self, text: str) -> str:
        """Clean and normalize text content."""
        if not text:
            return ""
        
        # Remove extra whitespace and normalize
        text = re.sub(r'\s+', ' ', text)
        text = text.strip()
        
        # Remove leading/trailing colons
        text = text.strip(':').strip()
        
        # Remove section headers that might have leaked in
        text = re.sub(r'^(Strengths?|Weakness(?:es)?)\s*:?\s*', '', text, flags=re.IGNORECASE)
        
        return text
    
    def extract_rating_drivers(self, file_path: str) -> Dict[str, Dict[str, str]]:
        """
        Main hybrid pipeline: Targeted area + Bold detection
        """
        try:
            print("üöÄ Starting Hybrid Rating Drivers Extraction Pipeline")
            print("=" * 80)
            
            # Step 1: Read HTML
            html_content = self.step1_read_html(file_path)
            
            # Step 2: Extract targeted HTML area (not just text)
            target_section = self.step2_extract_target_area_html(html_content)
            
            if not target_section:
                print("‚ùå No target area found")
                return {"strengths": {}, "weaknesses": {}}
            
            # Step 3: Apply bold detection logic to the targeted area
            result = self.step3_apply_bold_logic(target_section)
            
            print("\n" + "=" * 80)
            print("üéâ Hybrid pipeline completed successfully!")
            print(f"üìä Final Results: {len(result['strengths'])} strengths, {len(result['weaknesses'])} weaknesses")
            
            return result
            
        except Exception as e:
            print(f"\n‚ùå Pipeline failed: {str(e)}")
            self.logger.error(f"Pipeline error: {str(e)}")
            return {"strengths": {}, "weaknesses": {}}
    
    def save_results(self, results: Dict[str, Dict[str, str]], output_path: str = "extracted_results.json"):
        """Save results to JSON file"""
        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(results, f, indent=2, ensure_ascii=False)
            print(f"\nüíæ Results saved to: {output_path}")
        except Exception as e:
            print(f"‚ùå Error saving results: {str(e)}")

def process_folder(folder_path: str):
    """Process all HTML files in a folder using hybrid approach"""
    extractor = HybridRatingDriversExtractor()
    all_results = {}
    
    # Find all HTML files
    html_files = [f for f in os.listdir(folder_path) if f.lower().endswith(('.html', '.htm'))]
    
    print(f"üìÅ Found {len(html_files)} HTML files")
    
    # Process each file
    for filename in html_files:
        file_path = os.path.join(folder_path, filename)
        try:
            print(f"\n{'='*80}")
            print(f"üîÑ Processing: {filename}")
            print(f"{'='*80}")
            
            result = extractor.extract_rating_drivers(file_path)
            
            file_key = filename.replace('.html', '').replace('.htm', '')
            all_results[file_key] = result
            
            print(f"‚úÖ Completed {filename}: {len(result['strengths'])} strengths, {len(result['weaknesses'])} weaknesses")
            
        except Exception as e:
            print(f"‚ùå Error with {filename}: {e}")
            import traceback
            traceback.print_exc()
    
    return all_results

def save_and_print_results(results):
    """Save to JSON and print summary."""
    # Clean results to remove empty keys
    cleaned_results = {}
    
    for filename, data in results.items():
        cleaned_strengths = {}
        cleaned_weaknesses = {}
        
        # Clean strengths
        for key, value in data['strengths'].items():
            if key and len(key.strip()) > 3:  # Only keep meaningful keys
                cleaned_strengths[key.strip()] = value.strip() if value else ""
        
        # Clean weaknesses
        for key, value in data['weaknesses'].items():
            if key and len(key.strip()) > 3:  # Only keep meaningful keys
                cleaned_weaknesses[key.strip()] = value.strip() if value else ""
        
        cleaned_results[filename] = {
            'strengths': cleaned_strengths,
            'weaknesses': cleaned_weaknesses
        }
    
    # Save to JSON
    with open('extracted_results.json', 'w', encoding='utf-8') as f:
        json.dump(cleaned_results, f, indent=2, ensure_ascii=False)
    
    # Print summary
    print(f"\n{'='*80}")
    print("üìä FINAL RESULTS SUMMARY")
    print(f"{'='*80}")
    
    for filename, data in cleaned_results.items():
        print(f"\nüìÑ {filename}:")
        print(f"   üìà Strengths: {len(data['strengths'])}")
        print(f"   üìâ Weaknesses: {len(data['weaknesses'])}")
        
        # Print actual content
        if data['strengths']:
            print("\n   üîπ STRENGTHS:")
            for i, (key, value) in enumerate(data['strengths'].items(), 1):
                print(f"      {i}. {key}")
                if value:
                    print(f"         ‚Üí {value[:100]}{'...' if len(value) > 100 else ''}")
                print()
        
        if data['weaknesses']:
            print("\n   üî∏ WEAKNESSES:")
            for i, (key, value) in enumerate(data['weaknesses'].items(), 1):
                print(f"      {i}. {key}")
                if value:
                    print(f"         ‚Üí {value[:100]}{'...' if len(value) > 100 else ''}")
                print()
    
    print(f"\nüíæ Results saved to 'extracted_results.json'")

# Example usage
def main():
    """Main function to run the hybrid extraction"""
    folder_path = 'html_files'
    
    # Check if folder exists
    if not os.path.exists(folder_path):
        print(f"‚ùå Folder '{folder_path}' not found!")
        return
    
    # Process all files
    print("üöÄ Starting Hybrid Extraction Pipeline for all files...")
    results = process_folder(folder_path)
    
    if results:
        save_and_print_results(results)
    else:
        print("‚ùå No HTML files found or processed successfully!")

if __name__ == "__main__":
    main()
